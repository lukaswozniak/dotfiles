# use default user shell
set-option -g default-shell $SHELL
# tmux display things in 256 colors
set -g default-terminal "screen-256color"

set -g history-limit 1000000
set -g renumber-windows on
set -sg escape-time 0
set -g mouse on
set -g aggressive-resize on
# Activity Monitoring
setw -g monitor-activity off
set -g visual-activity off
# titles
set-option -g set-titles on
set-option -g set-titles-string "#T - #W"
# change default prefix to Ctrl+a
unbind C-b
set -g prefix C-a
bind C-a send-prefix
# r - reload config file
bind r source-file ~/.tmux.conf \; display "Config Reloaded!"
bind C-r source-file ~/.tmux.conf \; display "Config Reloaded!"
# | and - for splitting
bind v split-window -h -c "#{pane_current_path}"
bind C-v split-window -h -c "#{pane_current_path}"
bind V split-window -v -c "#{pane_current_path}"
bind C-S-v split-window -v -c "#{pane_current_path}"
# hjkl - for pane movement
bind h select-pane -L
bind C-h select-pane -L
bind j select-pane -D
bind C-j select-pane -D
bind k select-pane -U
bind C-k select-pane -U
bind l select-pane -R
bind C-l select-pane -R
# HJKL - for pane resize
bind H resize-pane -L
bind C-S-h resize-pane -L
bind J resize-pane -D
bind C-S-j resize-pane -D
bind K resize-pane -U
bind C-S-k resize-pane -U
bind L resize-pane -R
bind C-S-l resize-pane -R

# n for next-window, N for previous-window
bind N previous-window
bind C-S-n previous-window

# vi mode for copy mode

setw -g mode-keys vi

unbind [
bind Escape copy-mode

unbind p
bind p run -b "exec </dev/null; xclip -o -selection clipboard | tmux load-buffer - ; tmux paste-buffer"
bind C-p run -b "exec </dev/null; xclip -o -selection clipboard | tmux load-buffer - ; tmux paste-buffer"

bind -Tcopy-mode-vi Escape send -X cancel;
bind -Tcopy-mode-vi v send -X begin-selection;
bind -Tcopy-mode-vi V send -X select-line;
bind -Tcopy-mode-vi C-v send -X rectangle-toggle;
bind -Tchoice-mode-vi h send -X tree-collapse ;
bind -Tchoice-mode-vi l send -X tree-expand ;
bind -Tchoice-mode-vi H send -X tree-collapse-all ;
bind -Tchoice-mode-vi L send -X tree-expand-all ;
bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe "xclip -in -selection clipboard";
bind -Tcopy-mode-vi y send -X copy-pipe-and-cancel "xclip -in -selection clipboard"

## COLORSCHEME: gruvbox dark
set-option -g status "on"

# default statusbar color
set-option -g status-style bg=colour237,fg=colour223 # bg=bg1, fg=fg1

# default window title colors
set-window-option -g window-status-style bg=colour214,fg=colour237 # bg=yellow, fg=bg1

# default window with an activity alert
set-window-option -g window-status-activity-style bg=colour237,fg=colour248 # bg=bg1, fg=fg3

# active window title colors
set-window-option -g window-status-current-style bg=red,fg=colour237 # fg=bg1

# pane border
set-option -g pane-active-border-style fg=colour250 #fg2
set-option -g pane-border-style fg=colour237 #bg1

# message infos
set-option -g message-style bg=colour239,fg=colour223 # bg=bg2, fg=fg1

# writing commands inactive
set-option -g message-command-style bg=colour239,fg=colour223 # bg=fg3, fg=bg1

# pane number display
set-option -g display-panes-active-colour colour250 #fg2
set-option -g display-panes-colour colour237 #bg1

# clock
set-window-option -g clock-mode-colour colour109 #blue

# bell
set-window-option -g window-status-bell-style bg=colour167,fg=colour235 # bg=red, fg=bg

## Theme settings mixed with colors (unfortunately, but there is no cleaner way)
set-option -g status-justify "left"
set-option -g status-left-style none
set-option -g status-left-length "80"
set-option -g status-right-style none
set-option -g status-right-length "80"
set-window-option -g window-status-separator ""

set-option -g status-left "#[fg=colour248, bg=colour241] #S #[fg=colour241, bg=colour237, nobold, noitalics, nounderscore]"
set-option -g status-right "#[fg=colour239, bg=colour237, nobold, nounderscore, noitalics] #[fg=colour246,bg=colour239] %Y-%m-%d  %H:%M#[fg=colour248, bg=colour239, nobold, noitalics, nounderscore] #[fg=colour237, bg=colour248] #h "

set-window-option -g window-status-current-format "#[fg=colour237, bg=colour214, nobold, noitalics, nounderscore] #[fg=colour239, bg=colour214]#I#[fg=colour239, bg=colour214, bold] #W #[fg=colour214, bg=colour237, nobold, noitalics, nounderscore]"
set-window-option -g window-status-format "#[fg=colour237,bg=colour239,noitalics] #[fg=colour223,bg=colour239]#I#[fg=colour223, bg=colour239] #W #[fg=colour239, bg=colour237, noitalics]"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2 | tr -d "[:alpha:]") < 3.0" | bc) -eq 1  ]' \
"bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2 | tr -d "[:alpha:]") >= 3.0" | bc) -eq 1  ]' \
"bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\' 'select-pane -l'"
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

run-shell ~/dotfiles/submodules/tmux-sensible/sensible.tmux
